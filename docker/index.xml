<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockers on 小帅的技术小黑屋</title>
    <link>https://xxsvip.github.io/docker/</link>
    <description>Recent content in Dockers on 小帅的技术小黑屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Apr 2020 11:48:05 +0800</lastBuildDate>
    
	<atom:link href="https://xxsvip.github.io/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql</title>
      <link>https://xxsvip.github.io/docker/mysql/</link>
      <pubDate>Sun, 26 Apr 2020 11:48:05 +0800</pubDate>
      
      <guid>https://xxsvip.github.io/docker/mysql/</guid>
      <description>需要创建my.cnf文件，否则会以文件夹的形式创建，并在其中添加如下内容：
[mysqld] user=mysql character-set-server=utf8 default_authentication_plugin=mysql_native_password secure_file_priv=/var/lib/mysql expire_logs_days=7 sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION max_connections=1000 [client] default-character-set=utf8 [mysql] default-character-set=utf8  创建容器：
docker run -p 3306:3306 --name mysql --restart=always --privileged=true \ -v /Users/xingxiaoshuai/software/docker/mysql/log:/var/log/mysql \ -v /Users/xingxiaoshuai/software/docker/mysql/data:/var/lib/mysql \ -v /Users/xingxiaoshuai/software/docker/mysql/conf.d:/etc/mysql/cong.d \ -v /Users/xingxiaoshuai/software/docker/mysql/my.cnf:/etc/mysql/my.cnf \ -e MYSQL_ROOT_PASSWORD=root \ -d mysql  注意：启动mysql报如下错误，那是因为MYSQL新特性secure_file_priv对读写文件的影响。
修改my.cnf 在[mysqld]内加入secure_file_priv=/var/lib/mysql  </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://xxsvip.github.io/docker/redis/</link>
      <pubDate>Mon, 20 Apr 2020 21:25:27 +0800</pubDate>
      
      <guid>https://xxsvip.github.io/docker/redis/</guid>
      <description>docker run -p 6379:6379 --name redis \ -v /Users/xingxiaoshuai/software/docker/redis:/data \ -v /Users/xingxiaoshuai/software/docker/redis/conf/redis.conf:/etc/redis/redis.conf \ -d redis redis-server /etc/redis/redis.conf  注意：上面的redis.conf文件要先创建了，否则会认为是一个目录
docker exec -it redis redis-cli  直接运行上面命令操作redis
默认redis是将数据存储在内存中的，在redis.conf文件中输入：
appendonly yes  这样会在redis目录下生成appendonly.aof文件，重启redis数据不会丢失。
docker update 容器名称 --restart=always  设置容器自启动。</description>
    </item>
    
  </channel>
</rss>